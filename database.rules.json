{
  "rules": {
    "users": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": "$uid === auth.uid",

        "profile": {
          ".read": "auth !== null"
        },

        "chats": {
          "$chatId": {
            ".validate": "root.child('chats').hasChild($chatId)",
            "active": { ".validate": "newData.isBoolean()" },
            "displayName": {
              ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length < 50"
            }
          }
        },

        "connections": {
          ".read": "auth !== null"
        }
      }
    },

    "email_uids": {
      "$email": {
        ".read": "auth !== null",
        ".write": "auth !== null && !data.exists() && $email === auth.token.email.replace('.', '%2E')",
        ".validate": "newData.val() === auth.uid"
      }
    },

    "chats": {
      "$chatId": {
        ".read": "data.child('members').hasChild(auth.uid)",

        "lastMessage": {
          ".write": "data.parent().child('members').hasChild(auth.uid)",
          ".validate": "newData.hasChildren(['userId', 'text', 'timestamp']) && newData.child('userId').val() === auth.uid"
        },

        "members": {
          ".write": "!data.exists() && newData.exists() && newData.hasChild(auth.uid)",
          "$memberId": {
            ".validate": "newData.isBoolean() && root.child('users').hasChild($memberId)"
          }
        },

        "typing": {
          "$userId": {
            ".write": "$userId === auth.uid && root.child('chats').child($chatId).child('members').hasChild($userId)",
            ".validate": "newData.isNumber() && newData.val() <= now"
          }
        }
      }
    },

    "messages": {
      "$chatId": {
        ".read": "root.child('chats').child($chatId).child('members').hasChild(auth.uid)",

        "$messageId": {
          ".validate": "newData.hasChildren(['userId', 'text', 'timestamp'])",
          ".write": "root.child('chats').child($chatId).child('members').hasChild(auth.uid)",

          "userId": {
            ".validate": "newData.val() === auth.uid"
          },

          "read": {
            ".write": "data.parent().child('userId').val() !== auth.uid",
            ".validate": "newData.isNumber() && newData.val() <= now"
          },

          "text": {
            ".validate": "newData.isString()"
          },

          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          }
        }
      }
    }
  }
}
